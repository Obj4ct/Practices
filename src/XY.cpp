// A 有一个整数 x，他想找到最小的正整数 y 使得下式成立：
// (x and y)+(x or y)=2025
// 其中 and 表示二进制按位与运算，or 表示二进制按位或运算。如果不存在满足条件的 y，则输出no。
// 输入格式
// 一行，一个整数 x。
// 输出格式
// 一行，一个整数，若满足条件的 y 存在则输出 y，否则输出 ?1。
// 输入输出样例
// 输入
// 1025
// 输出
// 1000

// 题目化成(x & y) + (x | y) = x + y
// 因为每一位的按位与 & 和按位或 | 相加，等价于两个数的普通加法。
// 原理：
// x = 6  = 0110
// y = 3  = 0011

// x & y = 0010 = 2
// x | y = 0111 = 7

// x + y = 0b0111 = 7
// 所以 (x & y) + (x | y) = x + y
#include <iostream>
using namespace std;
//解法1 (x & y) + (x | y) = x + y
void fun01(int x)
{
    //定义变量y，表示2025减去x的值
    int y = 2025 - x;

    //如果y大于0，则输出y
    if (y > 0)
        cout << y << endl;
    //否则输出-1
    else
        cout << -1 << endl;
}
//解法2，枚举y，判断(x & y) + (x | y)是否等于2025
// 函数fun02，参数为整数x
void fun02(int x)
{
    // 循环变量y从1到2025
    for (int y = 1; y <= 2025; y++)
        // 如果x与y按位与的结果加上x与y按位或的结果等于2025
        if ((x & y) + (x | y) == 2025)
        {
            // 输出y
            cout << y << endl;
            // 返回
            return;
        }
    // 如果没有找到符合条件的y，输出-1
    cout << "-1" << endl;
}
int main()
{
    // 定义一个整数变量x
    int x;
    // 从标准输入流中读取一个整数，并将其赋值给变量x
    cin >> x;
    // 输出第一个方法
    cout << "第一个方法：" << endl;
    // 调用fun01函数，并将x作为参数传入
    fun01(x);
    // 输出第二个方法
    cout << "第二个方法：" << endl;
    // 调用fun02函数，并将x作为参数传入
    fun02(x);
}
